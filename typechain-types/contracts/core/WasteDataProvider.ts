/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace WasteDataProvider {
  export type WasteTypeStruct = {
    id: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
  };

  export type WasteTypeStructOutput = [string, string] & {
    id: string;
    name: string;
  };

  export type WasteCategoryStruct = {
    id: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    emissionRate: PromiseOrValue<BigNumberish>;
    wasteTypes: WasteDataProvider.WasteTypeStruct[];
  };

  export type WasteCategoryStructOutput = [
    string,
    string,
    BigNumber,
    WasteDataProvider.WasteTypeStructOutput[]
  ] & {
    id: string;
    name: string;
    emissionRate: BigNumber;
    wasteTypes: WasteDataProvider.WasteTypeStructOutput[];
  };
}

export interface WasteDataProviderInterface extends utils.Interface {
  functions: {
    "addOrUpdateCategory(string,string,uint256)": FunctionFragment;
    "addWasteTypeToCategory(string,string,string)": FunctionFragment;
    "checkStringHasValue(string)": FunctionFragment;
    "getCarbonEmissionRate(string)": FunctionFragment;
    "getCategoryByWasteType(string)": FunctionFragment;
    "getWasteTypes(string)": FunctionFragment;
    "isStringEmpty(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeCategory(string)": FunctionFragment;
    "removeWasteType(string)": FunctionFragment;
    "setCarbonEmissionRate(string,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateWasteType(string,string)": FunctionFragment;
    "wasteCategories(string)": FunctionFragment;
    "wasteTypeToCategory(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOrUpdateCategory"
      | "addWasteTypeToCategory"
      | "checkStringHasValue"
      | "getCarbonEmissionRate"
      | "getCategoryByWasteType"
      | "getWasteTypes"
      | "isStringEmpty"
      | "owner"
      | "removeCategory"
      | "removeWasteType"
      | "setCarbonEmissionRate"
      | "transferOwnership"
      | "updateWasteType"
      | "wasteCategories"
      | "wasteTypeToCategory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOrUpdateCategory",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addWasteTypeToCategory",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkStringHasValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCarbonEmissionRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryByWasteType",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWasteTypes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isStringEmpty",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeCategory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWasteType",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCarbonEmissionRate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWasteType",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wasteCategories",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wasteTypeToCategory",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addOrUpdateCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWasteTypeToCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkStringHasValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCarbonEmissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryByWasteType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWasteTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStringEmpty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWasteType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCarbonEmissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWasteType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wasteCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wasteTypeToCategory",
    data: BytesLike
  ): Result;

  events: {
    "CategoryAddedOrUpdated(string,string,uint256)": EventFragment;
    "CategoryRemoved(string)": EventFragment;
    "WasteTypeAdded(string,string,string)": EventFragment;
    "WasteTypeRemoved(string,string)": EventFragment;
    "WasteTypeUpdated(string,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CategoryAddedOrUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CategoryRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WasteTypeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WasteTypeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WasteTypeUpdated"): EventFragment;
}

export interface CategoryAddedOrUpdatedEventObject {
  categoryId: string;
  name: string;
  emissionRate: BigNumber;
}
export type CategoryAddedOrUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  CategoryAddedOrUpdatedEventObject
>;

export type CategoryAddedOrUpdatedEventFilter =
  TypedEventFilter<CategoryAddedOrUpdatedEvent>;

export interface CategoryRemovedEventObject {
  categoryId: string;
}
export type CategoryRemovedEvent = TypedEvent<
  [string],
  CategoryRemovedEventObject
>;

export type CategoryRemovedEventFilter = TypedEventFilter<CategoryRemovedEvent>;

export interface WasteTypeAddedEventObject {
  categoryId: string;
  wasteTypeId: string;
  name: string;
}
export type WasteTypeAddedEvent = TypedEvent<
  [string, string, string],
  WasteTypeAddedEventObject
>;

export type WasteTypeAddedEventFilter = TypedEventFilter<WasteTypeAddedEvent>;

export interface WasteTypeRemovedEventObject {
  categoryId: string;
  wasteTypeId: string;
}
export type WasteTypeRemovedEvent = TypedEvent<
  [string, string],
  WasteTypeRemovedEventObject
>;

export type WasteTypeRemovedEventFilter =
  TypedEventFilter<WasteTypeRemovedEvent>;

export interface WasteTypeUpdatedEventObject {
  categoryId: string;
  wasteTypeId: string;
  newName: string;
}
export type WasteTypeUpdatedEvent = TypedEvent<
  [string, string, string],
  WasteTypeUpdatedEventObject
>;

export type WasteTypeUpdatedEventFilter =
  TypedEventFilter<WasteTypeUpdatedEvent>;

export interface WasteDataProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WasteDataProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOrUpdateCategory(
      categoryId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      emissionRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addWasteTypeToCategory(
      categoryId: PromiseOrValue<string>,
      wasteTypeId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkStringHasValue(
      str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCarbonEmissionRate(
      wasteTypeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCategoryByWasteType(
      wasteTypeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[WasteDataProvider.WasteCategoryStructOutput]>;

    getWasteTypes(
      categoryId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[WasteDataProvider.WasteTypeStructOutput[]]>;

    isStringEmpty(
      str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeCategory(
      categoryId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWasteType(
      wasteTypeId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCarbonEmissionRate(
      categoryId: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWasteType(
      wasteTypeId: PromiseOrValue<string>,
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wasteCategories(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        id: string;
        name: string;
        emissionRate: BigNumber;
      }
    >;

    wasteTypeToCategory(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addOrUpdateCategory(
    categoryId: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    emissionRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addWasteTypeToCategory(
    categoryId: PromiseOrValue<string>,
    wasteTypeId: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkStringHasValue(
    str: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getCarbonEmissionRate(
    wasteTypeId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCategoryByWasteType(
    wasteTypeId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<WasteDataProvider.WasteCategoryStructOutput>;

  getWasteTypes(
    categoryId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<WasteDataProvider.WasteTypeStructOutput[]>;

  isStringEmpty(
    str: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeCategory(
    categoryId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWasteType(
    wasteTypeId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCarbonEmissionRate(
    categoryId: PromiseOrValue<string>,
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWasteType(
    wasteTypeId: PromiseOrValue<string>,
    newName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wasteCategories(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      id: string;
      name: string;
      emissionRate: BigNumber;
    }
  >;

  wasteTypeToCategory(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addOrUpdateCategory(
      categoryId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      emissionRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addWasteTypeToCategory(
      categoryId: PromiseOrValue<string>,
      wasteTypeId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkStringHasValue(
      str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCarbonEmissionRate(
      wasteTypeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryByWasteType(
      wasteTypeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<WasteDataProvider.WasteCategoryStructOutput>;

    getWasteTypes(
      categoryId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<WasteDataProvider.WasteTypeStructOutput[]>;

    isStringEmpty(
      str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeCategory(
      categoryId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWasteType(
      wasteTypeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCarbonEmissionRate(
      categoryId: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWasteType(
      wasteTypeId: PromiseOrValue<string>,
      newName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wasteCategories(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        id: string;
        name: string;
        emissionRate: BigNumber;
      }
    >;

    wasteTypeToCategory(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "CategoryAddedOrUpdated(string,string,uint256)"(
      categoryId?: PromiseOrValue<string> | null,
      name?: null,
      emissionRate?: null
    ): CategoryAddedOrUpdatedEventFilter;
    CategoryAddedOrUpdated(
      categoryId?: PromiseOrValue<string> | null,
      name?: null,
      emissionRate?: null
    ): CategoryAddedOrUpdatedEventFilter;

    "CategoryRemoved(string)"(
      categoryId?: PromiseOrValue<string> | null
    ): CategoryRemovedEventFilter;
    CategoryRemoved(
      categoryId?: PromiseOrValue<string> | null
    ): CategoryRemovedEventFilter;

    "WasteTypeAdded(string,string,string)"(
      categoryId?: PromiseOrValue<string> | null,
      wasteTypeId?: null,
      name?: null
    ): WasteTypeAddedEventFilter;
    WasteTypeAdded(
      categoryId?: PromiseOrValue<string> | null,
      wasteTypeId?: null,
      name?: null
    ): WasteTypeAddedEventFilter;

    "WasteTypeRemoved(string,string)"(
      categoryId?: PromiseOrValue<string> | null,
      wasteTypeId?: null
    ): WasteTypeRemovedEventFilter;
    WasteTypeRemoved(
      categoryId?: PromiseOrValue<string> | null,
      wasteTypeId?: null
    ): WasteTypeRemovedEventFilter;

    "WasteTypeUpdated(string,string,string)"(
      categoryId?: PromiseOrValue<string> | null,
      wasteTypeId?: null,
      newName?: null
    ): WasteTypeUpdatedEventFilter;
    WasteTypeUpdated(
      categoryId?: PromiseOrValue<string> | null,
      wasteTypeId?: null,
      newName?: null
    ): WasteTypeUpdatedEventFilter;
  };

  estimateGas: {
    addOrUpdateCategory(
      categoryId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      emissionRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addWasteTypeToCategory(
      categoryId: PromiseOrValue<string>,
      wasteTypeId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkStringHasValue(
      str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCarbonEmissionRate(
      wasteTypeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryByWasteType(
      wasteTypeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWasteTypes(
      categoryId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStringEmpty(
      str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeCategory(
      categoryId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWasteType(
      wasteTypeId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCarbonEmissionRate(
      categoryId: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWasteType(
      wasteTypeId: PromiseOrValue<string>,
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wasteCategories(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wasteTypeToCategory(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOrUpdateCategory(
      categoryId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      emissionRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addWasteTypeToCategory(
      categoryId: PromiseOrValue<string>,
      wasteTypeId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkStringHasValue(
      str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCarbonEmissionRate(
      wasteTypeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategoryByWasteType(
      wasteTypeId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWasteTypes(
      categoryId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStringEmpty(
      str: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCategory(
      categoryId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWasteType(
      wasteTypeId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCarbonEmissionRate(
      categoryId: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWasteType(
      wasteTypeId: PromiseOrValue<string>,
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wasteCategories(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wasteTypeToCategory(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
