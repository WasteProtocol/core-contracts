/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace WasteSettlement {
  export type WasteTradeStruct = {
    user: PromiseOrValue<string>;
    approver: PromiseOrValue<string>;
    wasteTypeIds: PromiseOrValue<string>[];
    amounts: PromiseOrValue<BigNumberish>[];
    approved: PromiseOrValue<boolean>;
    rejected: PromiseOrValue<boolean>;
    settled: PromiseOrValue<boolean>;
    totalTokenReceived: PromiseOrValue<BigNumberish>;
    totalUSDCReceived: PromiseOrValue<BigNumberish>;
    totalEmissionAmount: PromiseOrValue<BigNumberish>;
  };

  export type WasteTradeStructOutput = [
    string,
    string,
    string[],
    BigNumber[],
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    user: string;
    approver: string;
    wasteTypeIds: string[];
    amounts: BigNumber[];
    approved: boolean;
    rejected: boolean;
    settled: boolean;
    totalTokenReceived: BigNumber;
    totalUSDCReceived: BigNumber;
    totalEmissionAmount: BigNumber;
  };
}

export interface WasteSettlementInterface extends utils.Interface {
  functions: {
    "approveTrade(uint256)": FunctionFragment;
    "getPendingTrades()": FunctionFragment;
    "getTotalTrades()": FunctionFragment;
    "getTradeList(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "rejectTrade(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "socialNodeRegistry()": FunctionFragment;
    "submitWasteTrade(address,string[],uint256[])": FunctionFragment;
    "tradeCounter()": FunctionFragment;
    "trades(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateSocialNodeRegistry(address)": FunctionFragment;
    "updateWasteDataProvider(address)": FunctionFragment;
    "updateWastePriceProvider(address)": FunctionFragment;
    "usdc()": FunctionFragment;
    "wasteDataProvider()": FunctionFragment;
    "wastePriceProvider()": FunctionFragment;
    "wasteToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveTrade"
      | "getPendingTrades"
      | "getTotalTrades"
      | "getTradeList"
      | "owner"
      | "rejectTrade"
      | "renounceOwnership"
      | "socialNodeRegistry"
      | "submitWasteTrade"
      | "tradeCounter"
      | "trades"
      | "transferOwnership"
      | "updateSocialNodeRegistry"
      | "updateWasteDataProvider"
      | "updateWastePriceProvider"
      | "usdc"
      | "wasteDataProvider"
      | "wastePriceProvider"
      | "wasteToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveTrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingTrades",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTrades",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeList",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rejectTrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "socialNodeRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitWasteTrade",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trades",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSocialNodeRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWasteDataProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWastePriceProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wasteDataProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wastePriceProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wasteToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "approveTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "socialNodeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitWasteTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trades", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSocialNodeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWasteDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWastePriceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wasteDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wastePriceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wasteToken", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TradeApproved(uint256,address)": EventFragment;
    "TradeRejected(uint256,address)": EventFragment;
    "TradeSettled(uint256,address,uint256,uint256,uint256)": EventFragment;
    "TradeSubmitted(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeSubmitted"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TradeApprovedEventObject {
  tradeId: BigNumber;
  socialNode: string;
}
export type TradeApprovedEvent = TypedEvent<
  [BigNumber, string],
  TradeApprovedEventObject
>;

export type TradeApprovedEventFilter = TypedEventFilter<TradeApprovedEvent>;

export interface TradeRejectedEventObject {
  tradeId: BigNumber;
  socialNode: string;
}
export type TradeRejectedEvent = TypedEvent<
  [BigNumber, string],
  TradeRejectedEventObject
>;

export type TradeRejectedEventFilter = TypedEventFilter<TradeRejectedEvent>;

export interface TradeSettledEventObject {
  tradeId: BigNumber;
  user: string;
  wasteTokenAmount: BigNumber;
  usdcAmount: BigNumber;
  totalEmission: BigNumber;
}
export type TradeSettledEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  TradeSettledEventObject
>;

export type TradeSettledEventFilter = TypedEventFilter<TradeSettledEvent>;

export interface TradeSubmittedEventObject {
  tradeId: BigNumber;
  user: string;
}
export type TradeSubmittedEvent = TypedEvent<
  [BigNumber, string],
  TradeSubmittedEventObject
>;

export type TradeSubmittedEventFilter = TypedEventFilter<TradeSubmittedEvent>;

export interface WasteSettlement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WasteSettlementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveTrade(
      tradeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPendingTrades(
      overrides?: CallOverrides
    ): Promise<[WasteSettlement.WasteTradeStructOutput[]]>;

    getTotalTrades(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTradeList(
      page: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[WasteSettlement.WasteTradeStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rejectTrade(
      tradeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    socialNodeRegistry(overrides?: CallOverrides): Promise<[string]>;

    submitWasteTrade(
      userAddress: PromiseOrValue<string>,
      wasteTypeIds: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradeCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    trades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        approver: string;
        approved: boolean;
        rejected: boolean;
        settled: boolean;
        totalTokenReceived: BigNumber;
        totalUSDCReceived: BigNumber;
        totalEmissionAmount: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSocialNodeRegistry(
      _socialNodeRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWasteDataProvider(
      _wasteDataProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWastePriceProvider(
      _wastePriceProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    wasteDataProvider(overrides?: CallOverrides): Promise<[string]>;

    wastePriceProvider(overrides?: CallOverrides): Promise<[string]>;

    wasteToken(overrides?: CallOverrides): Promise<[string]>;
  };

  approveTrade(
    tradeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPendingTrades(
    overrides?: CallOverrides
  ): Promise<WasteSettlement.WasteTradeStructOutput[]>;

  getTotalTrades(overrides?: CallOverrides): Promise<BigNumber>;

  getTradeList(
    page: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<WasteSettlement.WasteTradeStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  rejectTrade(
    tradeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  socialNodeRegistry(overrides?: CallOverrides): Promise<string>;

  submitWasteTrade(
    userAddress: PromiseOrValue<string>,
    wasteTypeIds: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradeCounter(overrides?: CallOverrides): Promise<BigNumber>;

  trades(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      user: string;
      approver: string;
      approved: boolean;
      rejected: boolean;
      settled: boolean;
      totalTokenReceived: BigNumber;
      totalUSDCReceived: BigNumber;
      totalEmissionAmount: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSocialNodeRegistry(
    _socialNodeRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWasteDataProvider(
    _wasteDataProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWastePriceProvider(
    _wastePriceProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  wasteDataProvider(overrides?: CallOverrides): Promise<string>;

  wastePriceProvider(overrides?: CallOverrides): Promise<string>;

  wasteToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    approveTrade(
      tradeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPendingTrades(
      overrides?: CallOverrides
    ): Promise<WasteSettlement.WasteTradeStructOutput[]>;

    getTotalTrades(overrides?: CallOverrides): Promise<BigNumber>;

    getTradeList(
      page: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<WasteSettlement.WasteTradeStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    rejectTrade(
      tradeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    socialNodeRegistry(overrides?: CallOverrides): Promise<string>;

    submitWasteTrade(
      userAddress: PromiseOrValue<string>,
      wasteTypeIds: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    tradeCounter(overrides?: CallOverrides): Promise<BigNumber>;

    trades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        approver: string;
        approved: boolean;
        rejected: boolean;
        settled: boolean;
        totalTokenReceived: BigNumber;
        totalUSDCReceived: BigNumber;
        totalEmissionAmount: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSocialNodeRegistry(
      _socialNodeRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWasteDataProvider(
      _wasteDataProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWastePriceProvider(
      _wastePriceProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;

    wasteDataProvider(overrides?: CallOverrides): Promise<string>;

    wastePriceProvider(overrides?: CallOverrides): Promise<string>;

    wasteToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TradeApproved(uint256,address)"(
      tradeId?: null,
      socialNode?: PromiseOrValue<string> | null
    ): TradeApprovedEventFilter;
    TradeApproved(
      tradeId?: null,
      socialNode?: PromiseOrValue<string> | null
    ): TradeApprovedEventFilter;

    "TradeRejected(uint256,address)"(
      tradeId?: null,
      socialNode?: PromiseOrValue<string> | null
    ): TradeRejectedEventFilter;
    TradeRejected(
      tradeId?: null,
      socialNode?: PromiseOrValue<string> | null
    ): TradeRejectedEventFilter;

    "TradeSettled(uint256,address,uint256,uint256,uint256)"(
      tradeId?: null,
      user?: PromiseOrValue<string> | null,
      wasteTokenAmount?: null,
      usdcAmount?: null,
      totalEmission?: null
    ): TradeSettledEventFilter;
    TradeSettled(
      tradeId?: null,
      user?: PromiseOrValue<string> | null,
      wasteTokenAmount?: null,
      usdcAmount?: null,
      totalEmission?: null
    ): TradeSettledEventFilter;

    "TradeSubmitted(uint256,address)"(
      tradeId?: null,
      user?: PromiseOrValue<string> | null
    ): TradeSubmittedEventFilter;
    TradeSubmitted(
      tradeId?: null,
      user?: PromiseOrValue<string> | null
    ): TradeSubmittedEventFilter;
  };

  estimateGas: {
    approveTrade(
      tradeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPendingTrades(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTrades(overrides?: CallOverrides): Promise<BigNumber>;

    getTradeList(
      page: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rejectTrade(
      tradeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    socialNodeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    submitWasteTrade(
      userAddress: PromiseOrValue<string>,
      wasteTypeIds: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradeCounter(overrides?: CallOverrides): Promise<BigNumber>;

    trades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSocialNodeRegistry(
      _socialNodeRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWasteDataProvider(
      _wasteDataProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWastePriceProvider(
      _wastePriceProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    wasteDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    wastePriceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    wasteToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveTrade(
      tradeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPendingTrades(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalTrades(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTradeList(
      page: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rejectTrade(
      tradeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    socialNodeRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitWasteTrade(
      userAddress: PromiseOrValue<string>,
      wasteTypeIds: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradeCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSocialNodeRegistry(
      _socialNodeRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWasteDataProvider(
      _wasteDataProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWastePriceProvider(
      _wastePriceProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wasteDataProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wastePriceProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wasteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
