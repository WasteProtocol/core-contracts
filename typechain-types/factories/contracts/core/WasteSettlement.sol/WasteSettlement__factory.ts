/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  WasteSettlement,
  WasteSettlementInterface,
} from "../../../../contracts/core/WasteSettlement.sol/WasteSettlement";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdc",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wasteToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wastePriceProvider",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wasteDataProvider",
        type: "address",
      },
      {
        internalType: "address",
        name: "_socialNodeRegistry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tradeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "socialNode",
        type: "address",
      },
    ],
    name: "TradeApproved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tradeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "socialNode",
        type: "address",
      },
    ],
    name: "TradeRejected",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tradeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wasteTokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "usdcAmount",
        type: "uint256",
      },
    ],
    name: "TradeSettled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tradeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "TradeSubmitted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tradeId",
        type: "uint256",
      },
    ],
    name: "approveTrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getPendingTrades",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "address",
            name: "approver",
            type: "address",
          },
          {
            internalType: "string[]",
            name: "wasteTypeIds",
            type: "string[]",
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]",
          },
          {
            internalType: "bool",
            name: "approved",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "rejected",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "settled",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "totalTokenReceived",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalUSDCReceived",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalEmissionAmount",
            type: "uint256",
          },
        ],
        internalType: "struct WasteSettlement.WasteTrade[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalTrades",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "page",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "getTradeList",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "address",
            name: "approver",
            type: "address",
          },
          {
            internalType: "string[]",
            name: "wasteTypeIds",
            type: "string[]",
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]",
          },
          {
            internalType: "bool",
            name: "approved",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "rejected",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "settled",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "totalTokenReceived",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalUSDCReceived",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalEmissionAmount",
            type: "uint256",
          },
        ],
        internalType: "struct WasteSettlement.WasteTrade[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tradeId",
        type: "uint256",
      },
    ],
    name: "rejectTrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "socialNodeRegistry",
    outputs: [
      {
        internalType: "contract ISocialNodeRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "string[]",
        name: "wasteTypeIds",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "submitWasteTrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tradeCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "trades",
    outputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "rejected",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "settled",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "totalTokenReceived",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalUSDCReceived",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalEmissionAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_socialNodeRegistry",
        type: "address",
      },
    ],
    name: "updateSocialNodeRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wasteDataProvider",
        type: "address",
      },
    ],
    name: "updateWasteDataProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wastePriceProvider",
        type: "address",
      },
    ],
    name: "updateWastePriceProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "usdc",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wasteDataProvider",
    outputs: [
      {
        internalType: "contract IWasteDataProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wastePriceProvider",
    outputs: [
      {
        internalType: "contract IWastePriceProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wasteToken",
    outputs: [
      {
        internalType: "contract IWasteToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001e7438038062001e7483398101604081905262000034916200010f565b6200003f33620000a2565b600180546001600160a01b03199081166001600160a01b039788161790915560028054821695871695909517909455600380548516938616939093179092556004805484169185169190911790556005805490921692169190911790556200017f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010a57600080fd5b919050565b600080600080600060a086880312156200012857600080fd5b6200013386620000f2565b94506200014360208701620000f2565b93506200015360408701620000f2565b92506200016360608701620000f2565b91506200017360808701620000f2565b90509295509295909350565b611ce5806200018f6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80635a52ac42116100ad578063b127886211610071578063b1278862146102f0578063b6214e0f14610303578063d29d0d4d14610316578063ebd34f5014610329578063f2fde38b1461033157600080fd5b80635a52ac421461029a578063660d15b5146102ad578063715018a6146102c45780638da5cb5b146102cc578063a89234e3146102dd57600080fd5b80631e6c598e116100f45780631e6c598e1461018a57806325612867146102415780632928cd941461024957806338ac5655146102745780633e413bee1461028757600080fd5b806301663e5914610126578063062281c01461013b57806314b1d1d41461014e5780631e5c016d14610161575b600080fd5b610139610134366004611646565b610344565b005b61013961014936600461167b565b6104e2565b61013961015c366004611646565b61050c565b61017461016f36600461169d565b610688565b6040516101819190611798565b60405180910390f35b6101f3610198366004611646565b60076020819052600091825260409091208054600182015460048301546005840154600685015494909501546001600160a01b0393841695929093169360ff8083169461010084048216946201000090940490911692919088565b604080516001600160a01b03998a1681529890971660208901529415159587019590955291151560608601521515608085015260a084015260c083019190915260e082015261010001610181565b6101746109db565b60045461025c906001600160a01b031681565b6040516001600160a01b039091168152602001610181565b60025461025c906001600160a01b031681565b60015461025c906001600160a01b031681565b6101396102a836600461167b565b610c7c565b6102b660065481565b604051908152602001610181565b610139610ca6565b6000546001600160a01b031661025c565b6101396102eb366004611927565b610cba565b6101396102fe36600461167b565b610f01565b60035461025c906001600160a01b031681565b60055461025c906001600160a01b031681565b6006546102b6565b61013961033f36600461167b565b610f2b565b60055460405163ce03ba1560e01b81523360048201526001600160a01b039091169063ce03ba1590602401602060405180830381865afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b09190611a74565b6104015760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920536f6369616c4e6f64652063616e20617070726f7665000000000060448201526064015b60405180910390fd5b6000818152600760205260409020600481015460ff1615801561042e57506004810154610100900460ff16155b6104745760405162461bcd60e51b8152602060048201526017602482015276151c98591948185b1c9958591e481c1c9bd8d95cdcd959604a1b60448201526064016103f8565b60048101805460ff19166001908117909155810180546001600160a01b031916339081179091556040517f642ea0b1d63cc70f38e39719b589ae0a9a111ef74ae825093d1574009bdf4e29906104cd9085815260200190565b60405180910390a26104de82610fa4565b5050565b6104ea611428565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60055460405163ce03ba1560e01b81523360048201526001600160a01b039091169063ce03ba1590602401602060405180830381865afa158015610554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105789190611a74565b6105c45760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c7920536f6369616c4e6f64652063616e2072656a65637400000000000060448201526064016103f8565b6000818152600760205260409020600481015460ff161580156105f157506004810154610100900460ff16155b6106375760405162461bcd60e51b8152602060048201526017602482015276151c98591948185b1c9958591e481c1c9bd8d95cdcd959604a1b60448201526064016103f8565b60048101805461ff00191661010017905560405133907f1467d10b347736e8967d42852d25e3181fd4c70dcd2df433c27e02c051e2ab199061067c9085815260200190565b60405180910390a25050565b606060008311801561069a5750600082115b6106f45760405162461bcd60e51b815260206004820152602560248201527f5061676520616e64206c696d6974206d75737420626520677265617465722074604482015264068616e20360dc1b60648201526084016103f8565b600082610702600186611aac565b61070c9190611abf565b90506006548110610751576040805160008082526020820190925290610748565b6107356114d2565b81526020019060019003908161072d5790505b509150506109d5565b6006548390610761908390611aac565b81111561077957816006546107769190611aac565b90505b60008167ffffffffffffffff81111561079457610794611894565b6040519080825280602002602001820160405280156107cd57816020015b6107ba6114d2565b8152602001906001900390816107b25790505b50905060005b828110156109cf57600760006107e98387611ad6565b81526020808201929092526040908101600090812082516101408101845281546001600160a01b0390811682526001830154168186015260028201805485518188028101880187528181529296939587019492939192909184015b828210156108f057838290600052602060002001805461086390611ae9565b80601f016020809104026020016040519081016040528092919081815260200182805461088f90611ae9565b80156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505081526020019060010190610844565b5050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561094757602002820191906000526020600020905b815481526020019060010190808311610933575b5050509183525050600482015460ff80821615156020840152610100820481161515604084015262010000909104161515606082015260058201546080820152600682015460a082015260079091015460c09091015282518390839081106109b1576109b1611b23565b602002602001018190525080806109c790611b39565b9150506107d3565b50925050505b92915050565b6060600060065467ffffffffffffffff8111156109fa576109fa611894565b604051908082528060200260200182016040528015610a3357816020015b610a206114d2565b815260200190600190039081610a185790505b5090506000805b600654811015610c745760008181526007602052604090206004015460ff16158015610a7d5750600081815260076020526040902060040154610100900460ff16155b15610c6257600081815260076020908152604080832081516101408101835281546001600160a01b03908116825260018301541681850152600282018054845181870281018701865281815292969395948701949293919290919084015b82821015610b87578382906000526020600020018054610afa90611ae9565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2690611ae9565b8015610b735780601f10610b4857610100808354040283529160200191610b73565b820191906000526020600020905b815481529060010190602001808311610b5657829003601f168201915b505050505081526020019060010190610adb565b50505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610bde57602002820191906000526020600020905b815481526020019060010190808311610bca575b5050509183525050600482015460ff80821615156020840152610100820481161515604084015262010000909104161515606082015260058201546080820152600682015460a082015260079091015460c0909101528351849084908110610c4857610c48611b23565b60200260200101819052508180610c5e90611b39565b9250505b80610c6c81611b39565b915050610a3a565b509092915050565b610c84611428565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610cae611428565b610cb86000611482565b565b82518114610cfe5760405162461bcd60e51b81526020600482015260116024820152704d69736d61746368656420696e7075747360781b60448201526064016103f8565b6000835111610d445760405162461bcd60e51b8152602060048201526012602482015271139bc81dd85cdd19481cdd589b5a5d1d195960721b60448201526064016103f8565b604051806101400160405280856001600160a01b0316815260200160006001600160a01b03168152602001848152602001838380806020026020016040519081016040528093929190818152602001838360200280828437600092018290525093855250505060208083018290526040808401839052606084018390526080840183905260a0840183905260c090930182905260065482526007815290829020835181546001600160a01b039182166001600160a01b031991821617835585840151600184018054919093169116179055918301518051610e2b926002850192019061153d565b5060608201518051610e47916003840191602090910190611593565b50608082015160048201805460a085015160c086015161ffff1990921693151561ff0019169390931761010093151584021762ff00001916620100009115159190910217905560e08301516005830155820151600680830191909155610120909201516007909101555460405190815233907fef672b28bae6a730424a771e68963a9574c78dddaf507e3d293452dc20a260129060200160405180910390a260068054906000610ef683611b39565b919050555050505050565b610f09611428565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610f33611428565b6001600160a01b038116610f985760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f8565b610fa181611482565b50565b6000818152600760205260409020600481015460ff16610ffb5760405162461bcd60e51b8152602060048201526012602482015271151c985919481b9bdd08185c1c1c9bdd995960721b60448201526064016103f8565b600481015462010000900460ff161561104e5760405162461bcd60e51b8152602060048201526015602482015274151c98591948185b1c9958591e481cd95d1d1b1959605a1b60448201526064016103f8565b6000806000805b600285015481101561128757600085600201828154811061107857611078611b23565b90600052602060002001805461108d90611ae9565b80601f01602080910402602001604051908101604052809291908181526020018280546110b990611ae9565b80156111065780601f106110db57610100808354040283529160200191611106565b820191906000526020600020905b8154815290600101906020018083116110e957829003601f168201915b50505050509050600086600301838154811061112457611124611b23565b600091825260208220015460035460405163123f2bf960e21b81529193506001600160a01b0316906348fcafe490611160908690600401611b52565b602060405180830381865afa15801561117d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a19190611b65565b6004805460405163430be16160e11b81529293506000926001600160a01b0390911691638617c2c2916111d691889101611b52565b602060405180830381865afa1580156111f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112179190611b65565b90506127106112268285611abf565b61123890670de0b6b3a7640000611abf565b6112429190611b7e565b61124c9089611ad6565b97506112588284611abf565b6112629088611ad6565b965061126e8187611ad6565b955050505050808061127f90611b39565b915050611055565b5060078401819055600684018290556005840183905560025484546040516340c10f1960e01b81526001600160a01b039182166004820152602481018690529116906340c10f1990604401600060405180830381600087803b1580156112ec57600080fd5b505af1158015611300573d6000803e3d6000fd5b5050600154865460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018790529116925063a9059cbb91506044016020604051808303816000875af1158015611358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137c9190611a74565b6113bf5760405162461bcd60e51b81526020600482015260146024820152731554d110c81d1c985b9cd9995c8819985a5b195960621b60448201526064016103f8565b60048401805462ff0000191662010000179055835460408051878152602081018690529081018490526001600160a01b03909116907f98a9235cb534a334d5bda2d01cfec7ffb1e9ae4f4ba7f364922dc800fbcb1f599060600160405180910390a25050505050565b6000546001600160a01b03163314610cb85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016000151581526020016000151581526020016000151581526020016000815260200160008152602001600081525090565b828054828255906000526020600020908101928215611583579160200282015b8281111561158357825182906115739082611bef565b509160200191906001019061155d565b5061158f9291506115da565b5090565b8280548282559060005260206000209081019282156115ce579160200282015b828111156115ce5782518255916020019190600101906115b3565b5061158f9291506115f7565b8082111561158f5760006115ee828261160c565b506001016115da565b5b8082111561158f57600081556001016115f8565b50805461161890611ae9565b6000825580601f10611628575050565b601f016020900490600052602060002090810190610fa191906115f7565b60006020828403121561165857600080fd5b5035919050565b80356001600160a01b038116811461167657600080fd5b919050565b60006020828403121561168d57600080fd5b6116968261165f565b9392505050565b600080604083850312156116b057600080fd5b50508035926020909101359150565b6000815180845260005b818110156116e5576020818501810151868301820152016116c9565b506000602082860101526020601f19601f83011685010191505092915050565b600082825180855260208086019550808260051b84010181860160005b8481101561175057601f1986840301895261173e8383516116bf565b98840198925090830190600101611722565b5090979650505050505050565b600081518084526020808501945080840160005b8381101561178d57815187529582019590820190600101611771565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561188657888303603f19018552815180516001600160a01b03168452610140818901516001600160a01b038116868b01525087820151818987015261180a82870182611705565b91505060608083015186830382880152611824838261175d565b9250505060808083015161183b8288018215159052565b505060a08281015115159086015260c08083015115159086015260e08083015190860152610100808301519086015261012091820151919094015293860193908601906001016117bf565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156118d3576118d3611894565b604052919050565b60008083601f8401126118ed57600080fd5b50813567ffffffffffffffff81111561190557600080fd5b6020830191508360208260051b850101111561192057600080fd5b9250929050565b6000806000806060858703121561193d57600080fd5b6119468561165f565b935060208086013567ffffffffffffffff8082111561196457600080fd5b818801915088601f83011261197857600080fd5b81358181111561198a5761198a611894565b8060051b6119998582016118aa565b918252838101850191858101908c8411156119b357600080fd5b86860192505b83831015611a41578235858111156119d057600080fd5b8601603f81018e136119e157600080fd5b87810135868111156119f5576119f5611894565b611a07601f8201601f19168a016118aa565b8181528f6040838501011115611a1d5760008081fd5b81604084018b83013760009181018a019190915283525091860191908601906119b9565b98505050506040880135925080831115611a5a57600080fd5b5050611a68878288016118db565b95989497509550505050565b600060208284031215611a8657600080fd5b8151801515811461169657600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156109d5576109d5611a96565b80820281158282048414176109d5576109d5611a96565b808201808211156109d5576109d5611a96565b600181811c90821680611afd57607f821691505b602082108103611b1d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600060018201611b4b57611b4b611a96565b5060010190565b60208152600061169660208301846116bf565b600060208284031215611b7757600080fd5b5051919050565b600082611b9b57634e487b7160e01b600052601260045260246000fd5b500490565b601f821115611bea57600081815260208120601f850160051c81016020861015611bc75750805b601f850160051c820191505b81811015611be657828155600101611bd3565b5050505b505050565b815167ffffffffffffffff811115611c0957611c09611894565b611c1d81611c178454611ae9565b84611ba0565b602080601f831160018114611c525760008415611c3a5750858301515b600019600386901b1c1916600185901b178555611be6565b600085815260208120601f198616915b82811015611c8157888601518255948401946001909101908401611c62565b5085821015611c9f5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212209410f74625c4e7230fd006490b564f31bbd241c234d84497309b79eeb6e1535964736f6c63430008130033";

type WasteSettlementConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WasteSettlementConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WasteSettlement__factory extends ContractFactory {
  constructor(...args: WasteSettlementConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _usdc: PromiseOrValue<string>,
    _wasteToken: PromiseOrValue<string>,
    _wastePriceProvider: PromiseOrValue<string>,
    _wasteDataProvider: PromiseOrValue<string>,
    _socialNodeRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WasteSettlement> {
    return super.deploy(
      _usdc,
      _wasteToken,
      _wastePriceProvider,
      _wasteDataProvider,
      _socialNodeRegistry,
      overrides || {}
    ) as Promise<WasteSettlement>;
  }
  override getDeployTransaction(
    _usdc: PromiseOrValue<string>,
    _wasteToken: PromiseOrValue<string>,
    _wastePriceProvider: PromiseOrValue<string>,
    _wasteDataProvider: PromiseOrValue<string>,
    _socialNodeRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _usdc,
      _wasteToken,
      _wastePriceProvider,
      _wasteDataProvider,
      _socialNodeRegistry,
      overrides || {}
    );
  }
  override attach(address: string): WasteSettlement {
    return super.attach(address) as WasteSettlement;
  }
  override connect(signer: Signer): WasteSettlement__factory {
    return super.connect(signer) as WasteSettlement__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WasteSettlementInterface {
    return new utils.Interface(_abi) as WasteSettlementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WasteSettlement {
    return new Contract(address, _abi, signerOrProvider) as WasteSettlement;
  }
}
