{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/core/WasteSettlement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWasteToken {\n    function mint(address to, uint256 amount) external;\n}\n\ninterface IWastePriceProvider {\n    function getWastePrice(string memory wasteTypeId) external view returns (uint256);\n}\n\ninterface IWasteDataProvider {\n    function getCarbonEmissionRate(string memory wasteTypeId) external view returns (uint256);\n}\n\ninterface ISocialNodeRegistry {\n    function isSocialNode(address node) external view returns (bool);\n}\n\ncontract WasteSettlement is Ownable {\n    struct WasteTrade {\n        address user;\n        address approver;\n        string[] wasteTypeIds;\n        uint256[] amounts; // Amounts in grams\n        bool approved;\n        bool rejected;\n        bool settled;\n\n        uint256 totalTokenReceived;\n        uint256 totalUSDCReceived;\n        uint256 totalEmissionAmount;\n    }\n\n    // Address of the USDC token contract\n    IERC20 public usdc;\n\n    // Address of the WasteToken contract\n    IWasteToken public wasteToken;\n\n    // Address of the WastePriceProvider contract\n    IWastePriceProvider public wastePriceProvider;\n\n    // Address of the WasteDataProvider contract\n    IWasteDataProvider public wasteDataProvider;\n\n    // Address of the SocialNodeRegistry contract\n    ISocialNodeRegistry public socialNodeRegistry;\n\n    // Track all trades by their ID\n    uint256 public tradeCounter;\n    mapping(uint256 => WasteTrade) public trades;\n\n    // Events\n    event TradeSubmitted(uint256 tradeId, address indexed user);\n    event TradeApproved(uint256 tradeId, address indexed socialNode);\n    event TradeRejected(uint256 tradeId, address indexed socialNode);\n    event TradeSettled(uint256 tradeId, address indexed user, uint256 wasteTokenAmount, uint256 usdcAmount, uint256 totalEmission);\n\n    constructor(\n        address _usdc,\n        address _wasteToken,\n        address _wastePriceProvider,\n        address _wasteDataProvider,\n        address _socialNodeRegistry\n    ) {\n        usdc = IERC20(_usdc);\n        wasteToken = IWasteToken(_wasteToken);\n        wastePriceProvider = IWastePriceProvider(_wastePriceProvider);\n        wasteDataProvider = IWasteDataProvider(_wasteDataProvider);\n        socialNodeRegistry = ISocialNodeRegistry(_socialNodeRegistry);\n    }\n\n    // Submit a trade for waste processing\n    function submitWasteTrade(address userAddress, string[] memory  wasteTypeIds, uint256[] calldata amounts) external {\n        require(wasteTypeIds.length == amounts.length, \"Mismatched inputs\");\n        require(wasteTypeIds.length > 0, \"No waste submitted\");\n\n        trades[tradeCounter] = WasteTrade({\n            user: userAddress,\n            approver: address(0),\n            wasteTypeIds: wasteTypeIds,\n            amounts: amounts,\n            totalTokenReceived: 0,\n            totalEmissionAmount: 0,\n            totalUSDCReceived: 0,\n            approved: false,\n            rejected: false,\n            settled: false\n        });\n\n        emit TradeSubmitted(tradeCounter, msg.sender);\n        tradeCounter++;\n    }\n\n    // Approve a pending trade\n    function approveTrade(uint256 tradeId) external {\n        require(socialNodeRegistry.isSocialNode(msg.sender), \"Only SocialNode can approve\");\n        WasteTrade storage trade = trades[tradeId];\n        require(!trade.approved && !trade.rejected, \"Trade already processed\");\n\n        trade.approved = true;\n        trade.approver = msg.sender;\n        emit TradeApproved(tradeId, msg.sender);\n\n        // Calculate and settle the trade\n        settleTrade(tradeId);\n    }\n\n    // Reject a pending trade\n    function rejectTrade(uint256 tradeId) external {\n        require(socialNodeRegistry.isSocialNode(msg.sender), \"Only SocialNode can reject\");\n        WasteTrade storage trade = trades[tradeId];\n        require(!trade.approved && !trade.rejected, \"Trade already processed\");\n\n        trade.rejected = true;\n        emit TradeRejected(tradeId, msg.sender);\n    }\n\n    // Calculate and settle a trade\n    function settleTrade(uint256 tradeId) internal {\n        WasteTrade storage trade = trades[tradeId];\n        require(trade.approved, \"Trade not approved\");\n        require(!trade.settled, \"Trade already settled\");\n\n        uint256 totalWasteTokenAmount = 0;\n        uint256 totalUSDCAmount = 0;\n        uint256 totalEmissionAmount = 0;\n        for (uint256 i = 0; i < trade.wasteTypeIds.length; i++) {\n            string memory wasteTypeId = trade.wasteTypeIds[i];\n            uint256 amount = trade.amounts[i]; // in grams\n\n            // Fetch the waste price and carbon emission rate\n            uint256 price = wastePriceProvider.getWastePrice(wasteTypeId);\n            uint256 carbonEmissionRate = wasteDataProvider.getCarbonEmissionRate(wasteTypeId);\n\n            // Calculate the total WasteToken and USDC amounts\n            totalWasteTokenAmount += (amount * carbonEmissionRate * 1e18) / 1e4; // Adjust for decimals\n            totalUSDCAmount += (amount * price); // Adjust for decimals\n            totalEmissionAmount += carbonEmissionRate;\n        }\n\n        trade.totalEmissionAmount = totalEmissionAmount;\n        trade.totalUSDCReceived = totalUSDCAmount;\n        trade.totalTokenReceived = totalWasteTokenAmount;\n\n        // Mint WasteToken and transfer USDC to user\n        wasteToken.mint(trade.user, totalWasteTokenAmount);\n        require(usdc.transfer(trade.user, totalUSDCAmount), \"USDC transfer failed\");\n\n        trade.settled = true;\n        emit TradeSettled(tradeId, trade.user, totalWasteTokenAmount, totalUSDCAmount, totalEmissionAmount);\n    }\n\n    // Utility function to view pending trades\n    function getPendingTrades() external view returns (WasteTrade[] memory) {\n        WasteTrade[] memory pendingTrades = new WasteTrade[](tradeCounter);\n        uint256 count = 0;\n        for (uint256 i = 0; i < tradeCounter; i++) {\n            if (!trades[i].approved && !trades[i].rejected) {\n                pendingTrades[count] = trades[i];\n                count++;\n            }\n        }\n        return pendingTrades;\n    }\n\n    // Pagination function to get a list of trades\n    function getTradeList(uint256 page, uint256 limit) external view returns (WasteTrade[] memory) {\n        require(page > 0 && limit > 0, \"Page and limit must be greater than 0\");\n\n        uint256 cursor = (page - 1) * limit;\n        if (cursor >= tradeCounter) {\n            return new WasteTrade[](0) ;\n        }\n\n        uint256 tempLength = limit;\n        if (tempLength > tradeCounter - cursor) {\n            tempLength = tradeCounter - cursor;\n        }\n\n        WasteTrade[] memory paginatedTrades = new WasteTrade[](tempLength);\n        for (uint256 i = 0; i < tempLength; i++) {\n            paginatedTrades[i] = trades[cursor + i];\n        }\n\n        return paginatedTrades;\n    }\n\n    // Get the total number of trades\n    function getTotalTrades() external view returns (uint256) {\n        return tradeCounter;\n    }\n\n    // Update contract addresses\n    function updateWastePriceProvider(address _wastePriceProvider) external onlyOwner {\n        wastePriceProvider = IWastePriceProvider(_wastePriceProvider);\n    }\n\n    function updateWasteDataProvider(address _wasteDataProvider) external onlyOwner {\n        wasteDataProvider = IWasteDataProvider(_wasteDataProvider);\n    }\n\n    function updateSocialNodeRegistry(address _socialNodeRegistry) external onlyOwner {\n        socialNodeRegistry = ISocialNodeRegistry(_socialNodeRegistry);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}