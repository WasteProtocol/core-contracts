{
  "address": "0x56287933c2e7aBf68f2C0Dd43f807De4C5DA228f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "SocialNodeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "SocialNodeRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "addSocialNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "isSocialNode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "removeSocialNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde0fcdc2ac3f1bb5644d871ab9cbba4047400ced721609834c8091e7000700a4",
  "receipt": {
    "to": null,
    "from": "0x8962DFafe0Ed6c3801BbbD8196D1156b5e97351a",
    "contractAddress": "0x56287933c2e7aBf68f2C0Dd43f807De4C5DA228f",
    "transactionIndex": 24,
    "gasUsed": "290230",
    "logsBloom": "0x
    "blockHash": "0x0af4659e78a198c046f8a59522ce43339ff6fd0048d72dd07ceb85b5f4e774ff",
    "transactionHash": "0xde0fcdc2ac3f1bb5644d871ab9cbba4047400ced721609834c8091e7000700a4",
    "logs": [],
    "blockNumber": 6732250,
    "cumulativeGasUsed": "10026533",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "624c87998f782d888d2f9167472e30fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"SocialNodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"SocialNodeRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"addSocialNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isSocialNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"removeSocialNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/SocialNodeRegistry.sol\":\"SocialNodeRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/SocialNodeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract SocialNodeRegistry {\\n    // Mapping to store authorized SocialNodes\\n    mapping(address => bool) private socialNodes;\\n\\n    // Address of the contract owner (officer)\\n    address public owner;\\n\\n    // Event emitted when a new SocialNode is added\\n    event SocialNodeAdded(address indexed node);\\n\\n    // Event emitted when a SocialNode is removed\\n    event SocialNodeRemoved(address indexed node);\\n\\n    // Modifier to restrict access to the owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    // Constructor to set the owner\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Function to add a SocialNode (onlyOwner)\\n    function addSocialNode(address node) external onlyOwner {\\n        require(!socialNodes[node], \\\"Node is already registered\\\");\\n        socialNodes[node] = true;\\n        emit SocialNodeAdded(node);\\n    }\\n\\n    // Function to remove a SocialNode (onlyOwner)\\n    function removeSocialNode(address node) external onlyOwner {\\n        require(socialNodes[node], \\\"Node is not registered\\\");\\n        socialNodes[node] = false;\\n        emit SocialNodeRemoved(node);\\n    }\\n\\n    // Function to check if an address is a SocialNode\\n    function isSocialNode(address node) external view returns (bool) {\\n        return socialNodes[node];\\n    }\\n\\n    // Function to transfer ownership\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"Invalid address\\\");\\n        owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xb6366454e4f5c70162adb5ea32785a440a5f3e74c8867b50ebc1916f781cd35b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600180546001600160a01b031916331790556103e1806100326000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635141b5d41461005c57806379d60cf7146100715780638da5cb5b14610084578063ce03ba15146100b4578063f2fde38b146100f0575b600080fd5b61006f61006a366004610353565b610103565b005b61006f61007f366004610353565b6101eb565b600154610097906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e06100c2366004610353565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020016100ab565b61006f6100fe366004610353565b6102bf565b6001546001600160a01b031633146101365760405162461bcd60e51b815260040161012d90610383565b60405180910390fd5b6001600160a01b03811660009081526020819052604090205460ff161561019f5760405162461bcd60e51b815260206004820152601a60248201527f4e6f646520697320616c72656164792072656769737465726564000000000000604482015260640161012d565b6001600160a01b038116600081815260208190526040808220805460ff19166001179055517fe09245d372b32a6b8a9f8519973e8bd814db68eea1ea9563b6dbdf8b13fb40c19190a250565b6001546001600160a01b031633146102155760405162461bcd60e51b815260040161012d90610383565b6001600160a01b03811660009081526020819052604090205460ff166102765760405162461bcd60e51b8152602060048201526016602482015275139bd919481a5cc81b9bdd081c9959da5cdd195c995960521b604482015260640161012d565b6001600160a01b038116600081815260208190526040808220805460ff19169055517f122d6674cc1f646ff2b5f1925f2151f268b87ab97eb406201299a3d6ed2091bb9190a250565b6001546001600160a01b031633146102e95760405162461bcd60e51b815260040161012d90610383565b6001600160a01b0381166103315760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640161012d565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561036557600080fd5b81356001600160a01b038116811461037c57600080fd5b9392505050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b60408201526060019056fea2646970667358221220fd0225c0c33e486d5286ca7f8fd0770b31f579409321f0abc77a7ad4c757811264736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80635141b5d41461005c57806379d60cf7146100715780638da5cb5b14610084578063ce03ba15146100b4578063f2fde38b146100f0575b600080fd5b61006f61006a366004610353565b610103565b005b61006f61007f366004610353565b6101eb565b600154610097906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e06100c2366004610353565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020016100ab565b61006f6100fe366004610353565b6102bf565b6001546001600160a01b031633146101365760405162461bcd60e51b815260040161012d90610383565b60405180910390fd5b6001600160a01b03811660009081526020819052604090205460ff161561019f5760405162461bcd60e51b815260206004820152601a60248201527f4e6f646520697320616c72656164792072656769737465726564000000000000604482015260640161012d565b6001600160a01b038116600081815260208190526040808220805460ff19166001179055517fe09245d372b32a6b8a9f8519973e8bd814db68eea1ea9563b6dbdf8b13fb40c19190a250565b6001546001600160a01b031633146102155760405162461bcd60e51b815260040161012d90610383565b6001600160a01b03811660009081526020819052604090205460ff166102765760405162461bcd60e51b8152602060048201526016602482015275139bd919481a5cc81b9bdd081c9959da5cdd195c995960521b604482015260640161012d565b6001600160a01b038116600081815260208190526040808220805460ff19169055517f122d6674cc1f646ff2b5f1925f2151f268b87ab97eb406201299a3d6ed2091bb9190a250565b6001546001600160a01b031633146102e95760405162461bcd60e51b815260040161012d90610383565b6001600160a01b0381166103315760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640161012d565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561036557600080fd5b81356001600160a01b038116811461037c57600080fd5b9392505050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b60408201526060019056fea2646970667358221220fd0225c0c33e486d5286ca7f8fd0770b31f579409321f0abc77a7ad4c757811264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3472,
        "contract": "contracts/core/SocialNodeRegistry.sol:SocialNodeRegistry",
        "label": "socialNodes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3474,
        "contract": "contracts/core/SocialNodeRegistry.sol:SocialNodeRegistry",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}