{
  "address": "0x75f8Cf9659A65AabE41Ade64BB9F1Fb123a4185b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "categoryId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emissionRate",
          "type": "uint256"
        }
      ],
      "name": "CategoryAddedOrUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "categoryId",
          "type": "string"
        }
      ],
      "name": "CategoryRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "categoryId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "wasteTypeId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "WasteTypeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "categoryId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "wasteTypeId",
          "type": "string"
        }
      ],
      "name": "WasteTypeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "categoryId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "wasteTypeId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "WasteTypeUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "categoryId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "emissionRate",
          "type": "uint256"
        }
      ],
      "name": "addOrUpdateCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "categoryId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "wasteTypeId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "addWasteTypeToCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "checkStringHasValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "wasteTypeId",
          "type": "string"
        }
      ],
      "name": "getCarbonEmissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "wasteTypeId",
          "type": "string"
        }
      ],
      "name": "getCategoryByWasteType",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "emissionRate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "id",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct WasteDataProvider.WasteType[]",
              "name": "wasteTypes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct WasteDataProvider.WasteCategory",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "categoryId",
          "type": "string"
        }
      ],
      "name": "getWasteTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct WasteDataProvider.WasteType[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "isStringEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "categoryId",
          "type": "string"
        }
      ],
      "name": "removeCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "wasteTypeId",
          "type": "string"
        }
      ],
      "name": "removeWasteType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "categoryId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setCarbonEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "wasteTypeId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "updateWasteType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "wasteCategories",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "emissionRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "wasteTypeToCategory",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d6243b5374571610bdc5e690eef3f239b691b6025e589d834d22c94ec9dea87",
  "receipt": {
    "to": null,
    "from": "0x8962DFafe0Ed6c3801BbbD8196D1156b5e97351a",
    "contractAddress": "0x75f8Cf9659A65AabE41Ade64BB9F1Fb123a4185b",
    "transactionIndex": 132,
    "gasUsed": "1810940",
    "logsBloom": "0x
    "blockHash": "0x5c59e642fd78e3cd29e062d5916fa83280ffbc84bba1a8dd54baa10a3395ba18",
    "transactionHash": "0x2d6243b5374571610bdc5e690eef3f239b691b6025e589d834d22c94ec9dea87",
    "logs": [],
    "blockNumber": 6732954,
    "cumulativeGasUsed": "19573332",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "fde2e7d0e7d5a473965ec50a119501de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"categoryId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"}],\"name\":\"CategoryAddedOrUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"categoryId\",\"type\":\"string\"}],\"name\":\"CategoryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"categoryId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"wasteTypeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"WasteTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"categoryId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"wasteTypeId\",\"type\":\"string\"}],\"name\":\"WasteTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"categoryId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"wasteTypeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"WasteTypeUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"categoryId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"}],\"name\":\"addOrUpdateCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"categoryId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"wasteTypeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addWasteTypeToCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"checkStringHasValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wasteTypeId\",\"type\":\"string\"}],\"name\":\"getCarbonEmissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wasteTypeId\",\"type\":\"string\"}],\"name\":\"getCategoryByWasteType\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct WasteDataProvider.WasteType[]\",\"name\":\"wasteTypes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct WasteDataProvider.WasteCategory\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"categoryId\",\"type\":\"string\"}],\"name\":\"getWasteTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct WasteDataProvider.WasteType[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"isStringEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"categoryId\",\"type\":\"string\"}],\"name\":\"removeCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wasteTypeId\",\"type\":\"string\"}],\"name\":\"removeWasteType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"categoryId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setCarbonEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wasteTypeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"updateWasteType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"wasteCategories\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"wasteTypeToCategory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setCarbonEmissionRate(string,uint256)\":{\"details\":\"Sets the carbon emission rate of a specific waste type (for testing purposes)\",\"params\":{\"categoryId\":\"The ID of the waste category\",\"rate\":\"The carbon emission rate in g of CO2 per g of waste, scaled by 1e18\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/WasteDataProvider.sol\":\"WasteDataProvider\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/core/WasteDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract WasteDataProvider {\\n\\n    using Strings for string;\\n\\n    // Struct for waste types under each category\\n    struct WasteType {\\n        string id;\\n        string name;\\n    }\\n\\n    // Struct for waste categories\\n    struct WasteCategory {\\n        string id;\\n        string name;\\n        uint256 emissionRate; // Emission rate for the category\\n        WasteType[] wasteTypes; // Array of waste types in this category\\n    }\\n\\n    // Mapping from category ID to WasteCategory\\n    mapping(string => WasteCategory) public wasteCategories;\\n\\n    // Mapping from waste type ID to the category it belongs to\\n    mapping(string => string) public wasteTypeToCategory;\\n\\n    // Address of the contract owner (officer)\\n    address public owner;\\n\\n    // Event emitted when a category is added or updated\\n    event CategoryAddedOrUpdated(string indexed categoryId, string name, uint256 emissionRate);\\n\\n    // Event emitted when a waste type is added to a category\\n    event WasteTypeAdded(string indexed categoryId, string wasteTypeId, string name);\\n\\n    // Event emitted when a waste type is updated\\n    event WasteTypeUpdated(string indexed categoryId, string wasteTypeId, string newName);\\n\\n    // Event emitted when a category is removed\\n    event CategoryRemoved(string indexed categoryId);\\n\\n    // Event emitted when a waste type is removed\\n    event WasteTypeRemoved(string indexed categoryId, string wasteTypeId);\\n\\n    // Modifier to restrict access to the owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    // Constructor to set the contract owner\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Function to add or update a waste category (onlyOwner)\\n    function addOrUpdateCategory(string memory categoryId, string memory name, uint256 emissionRate) external onlyOwner {\\n        WasteCategory storage category = wasteCategories[categoryId];\\n        category.id = categoryId;\\n        category.name = name;\\n        category.emissionRate = emissionRate;\\n        emit CategoryAddedOrUpdated(categoryId, name, emissionRate);\\n    }\\n\\n    // Function to add a waste type to a category (onlyOwner)\\n    function addWasteTypeToCategory(string memory categoryId, string memory wasteTypeId, string memory name) external onlyOwner {\\n        WasteCategory storage category = wasteCategories[categoryId];\\n        require(checkStringHasValue(category.id), \\\"Category does not exist\\\");\\n\\n        WasteType memory newWasteType = WasteType({\\n            id: wasteTypeId,\\n            name: name\\n        });\\n\\n        category.wasteTypes.push(newWasteType);\\n        wasteTypeToCategory[wasteTypeId] = categoryId; // Map waste type ID to its category\\n        emit WasteTypeAdded(categoryId, wasteTypeId, name);\\n    }\\n\\n    // Function to update an existing waste type (onlyOwner)\\n    function updateWasteType(string memory wasteTypeId, string memory newName) external onlyOwner {\\n        string memory categoryId = wasteTypeToCategory[wasteTypeId];\\n        require(checkStringHasValue(categoryId), \\\"WasteType not associated with any category\\\");\\n\\n        WasteCategory storage category = wasteCategories[categoryId];\\n\\n        // Find and update the waste type within the category\\n        bool updated = false;\\n        for (uint256 i = 0; i < category.wasteTypes.length; i++) {\\n            if (category.wasteTypes[i].id.equal(wasteTypeId)) {\\n                category.wasteTypes[i].name = newName;\\n                updated = true;\\n                emit WasteTypeUpdated(categoryId, wasteTypeId, newName);\\n                break;\\n            }\\n        }\\n\\n        require(updated, \\\"WasteType not found\\\");\\n    }\\n\\n    // Function to remove a waste category and all its waste types (onlyOwner)\\n    function removeCategory(string memory categoryId) external onlyOwner {\\n        WasteCategory storage category = wasteCategories[categoryId];\\n        require(checkStringHasValue(category.id), \\\"Category does not exist\\\");\\n\\n        // Remove all waste types from the category\\n        for (uint256 i = 0; i < category.wasteTypes.length; i++) {\\n            string memory wasteTypeId = category.wasteTypes[i].id;\\n            delete wasteTypeToCategory[wasteTypeId]; // Remove mapping of each waste type\\n        }\\n\\n        // Delete the category itself\\n        delete wasteCategories[categoryId];\\n\\n        emit CategoryRemoved(categoryId);\\n    }\\n\\n    // Function to remove a waste type from a category (onlyOwner)\\n    function removeWasteType(string memory wasteTypeId) external onlyOwner {\\n        string memory categoryId = wasteTypeToCategory[wasteTypeId];\\n        require(checkStringHasValue(categoryId), \\\"WasteType not associated with any category\\\");\\n\\n        WasteCategory storage category = wasteCategories[categoryId];\\n\\n        // Find and remove the waste type within the category\\n        bool removed = false;\\n        for (uint256 i = 0; i < category.wasteTypes.length; i++) {\\n            if (category.wasteTypes[i].id.equal(wasteTypeId)) {\\n                // Remove the waste type by swapping it with the last element and popping the array\\n                category.wasteTypes[i] = category.wasteTypes[category.wasteTypes.length - 1];\\n                category.wasteTypes.pop();\\n                removed = true;\\n                break;\\n            }\\n        }\\n\\n        require(removed, \\\"WasteType not found\\\");\\n        delete wasteTypeToCategory[wasteTypeId]; // Remove mapping\\n\\n        emit WasteTypeRemoved(categoryId, wasteTypeId);\\n    }\\n\\n    // Function to get waste types for a given category\\n    function getWasteTypes(string memory categoryId) external view returns (WasteType[] memory) {\\n        WasteCategory storage category = wasteCategories[categoryId];\\n        return category.wasteTypes;\\n    }\\n\\n    // Function to get the waste category by waste type ID\\n    function getCategoryByWasteType(string memory wasteTypeId) external view returns (WasteCategory memory) {\\n        string memory categoryId = wasteTypeToCategory[wasteTypeId];\\n        require(checkStringHasValue(categoryId), \\\"WasteType not associated with any category\\\");\\n        return wasteCategories[categoryId];\\n    }\\n\\n    // Function to transfer ownership\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"Invalid address\\\");\\n        owner = newOwner;\\n    }\\n\\n    function getCarbonEmissionRate(string memory wasteTypeId) public view returns (uint256) {\\n        string memory categoryId = wasteTypeToCategory[wasteTypeId];\\n        WasteCategory storage category = wasteCategories[categoryId];\\n        return category.emissionRate;\\n    }\\n\\n    /**\\n     * @dev Sets the carbon emission rate of a specific waste type (for testing purposes)\\n     * @param categoryId The ID of the waste category\\n     * @param rate The carbon emission rate in g of CO2 per g of waste, scaled by 1e18\\n     */\\n    function setCarbonEmissionRate(string memory categoryId, uint256 rate) external onlyOwner {\\n        WasteCategory storage category = wasteCategories[categoryId];\\n        category.emissionRate = rate;\\n    }\\n\\n    function isStringEmpty(string memory str) public pure returns (bool) {\\n        // Convert string to bytes and check if the length is 0\\n        return bytes(str).length == 0;\\n    }\\n\\n    function checkStringHasValue(string memory str) public pure returns (bool) {\\n        // If bytes length is greater than 0, the string has a value\\n        return bytes(str).length > 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcff09503c296a0f8161750f5543a86703a2789f0189d23063bd6ae062818df42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600280546001600160a01b03191633179055611f61806100326000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063de5d227411610066578063de5d227414610236578063edc785f914610249578063f03e3df11461025c578063f2fde38b1461027c57600080fd5b80638da5cb5b146101c55780639bfc012a146101f0578063c84a970214610203578063d89ff3b21461021657600080fd5b8063757c0228116100d3578063757c02281461015a578063852b1fe41461016d578063852fa8f9146101805780638617c2c2146101a457600080fd5b806304b59879146100fa5780632db30de41461010f578063640364a414610138575b600080fd5b61010d6101083660046117cc565b61028f565b005b61012261011d366004611854565b610499565b60405161012f91906118e1565b60405180910390f35b61014b610146366004611854565b61053e565b60405161012f939291906118fb565b61010d610168366004611931565b61067b565b61010d61017b366004611995565b610956565b61019461018e366004611854565b51151590565b604051901515815260200161012f565b6101b76101b2366004611854565b610a19565b60405190815260200161012f565b6002546101d8906001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b6101946101fe366004611854565b511590565b61010d610211366004611854565b610af1565b610229610224366004611854565b610dc4565b60405161012f9190611a02565b61010d610244366004611854565b610f6d565b61010d610257366004611a87565b6111a5565b61026f61026a366004611854565b6111fa565b60405161012f9190611acc565b61010d61028a366004611b9a565b6115d7565b6002546001600160a01b031633146102c25760405162461bcd60e51b81526004016102b990611bc3565b60405180910390fd5b600080846040516102d39190611beb565b908152602001604051809103902090506103798160000180546102f590611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461032190611c07565b801561036e5780601f106103435761010080835404028352916020019161036e565b820191906000526020600020905b81548152906001019060200180831161035157829003601f168201915b505050505051151590565b6103bf5760405162461bcd60e51b815260206004820152601760248201527610d85d1959dbdc9e48191bd95cc81b9bdd08195e1a5cdd604a1b60448201526064016102b9565b6040805180820190915283815260208082018490526003830180546001810182556000918252919020825183926002029091019081906103ff9082611c90565b50602082015160018201906104149082611c90565b505050846001856040516104289190611beb565b908152602001604051809103902090816104429190611c90565b50846040516104519190611beb565b60405180910390207f1b941ae6c2b6f23bf1a4862e293a66b25c90806f96774160c42c5fd58886baf4858560405161048a929190611d50565b60405180910390a25050505050565b8051602081830181018051600182529282019190930120915280546104bd90611c07565b80601f01602080910402602001604051908101604052809291908181526020018280546104e990611c07565b80156105365780601f1061050b57610100808354040283529160200191610536565b820191906000526020600020905b81548152906001019060200180831161051957829003601f168201915b505050505081565b805160208183018101805160008252928201919093012091528054819061056490611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461059090611c07565b80156105dd5780601f106105b2576101008083540402835291602001916105dd565b820191906000526020600020905b8154815290600101906020018083116105c057829003601f168201915b5050505050908060010180546105f290611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461061e90611c07565b801561066b5780601f106106405761010080835404028352916020019161066b565b820191906000526020600020905b81548152906001019060200180831161064e57829003601f168201915b5050505050908060020154905083565b6002546001600160a01b031633146106a55760405162461bcd60e51b81526004016102b990611bc3565b60006001836040516106b79190611beb565b908152602001604051809103902080546106d090611c07565b80601f01602080910402602001604051908101604052809291908181526020018280546106fc90611c07565b80156107495780601f1061071e57610100808354040283529160200191610749565b820191906000526020600020905b81548152906001019060200180831161072c57829003601f168201915b5050505050905061075a8151151590565b6107765760405162461bcd60e51b81526004016102b990611d7e565b600080826040516107879190611beb565b908152602001604051809103902090506000805b600383015481101561090b57610868868460030183815481106107c0576107c0611dc8565b906000526020600020906002020160000180546107dc90611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461080890611c07565b80156108555780601f1061082a57610100808354040283529160200191610855565b820191906000526020600020905b81548152906001019060200180831161083857829003601f168201915b505050505061166b90919063ffffffff16565b156108f9578483600301828154811061088357610883611dc8565b906000526020600020906002020160010190816108a09190611c90565b5060019150836040516108b39190611beb565b60405180910390207f1c46be1eb69c39252736f373574211ed8b3557fcb0540cdd415d7026ba47a16387876040516108ec929190611d50565b60405180910390a261090b565b8061090381611df4565b91505061079b565b508061094f5760405162461bcd60e51b815260206004820152601360248201527215d85cdd19551e5c19481b9bdd08199bdd5b99606a1b60448201526064016102b9565b5050505050565b6002546001600160a01b031633146109805760405162461bcd60e51b81526004016102b990611bc3565b600080846040516109919190611beb565b9081526040519081900360200190209050806109ad8582611c90565b50600181016109bc8482611c90565b50600281018290556040516109d2908590611beb565b60405180910390207ff09687f1ff8ccddd2db840bcc509b48cd253a6630592078d85d4c3ecedae7d508484604051610a0b929190611e0d565b60405180910390a250505050565b600080600183604051610a2c9190611beb565b90815260200160405180910390208054610a4590611c07565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7190611c07565b8015610abe5780601f10610a9357610100808354040283529160200191610abe565b820191906000526020600020905b815481529060010190602001808311610aa157829003601f168201915b5050505050905060008082604051610ad69190611beb565b90815260405190819003602001902060020154949350505050565b6002546001600160a01b03163314610b1b5760405162461bcd60e51b81526004016102b990611bc3565b6000600182604051610b2d9190611beb565b90815260200160405180910390208054610b4690611c07565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7290611c07565b8015610bbf5780601f10610b9457610100808354040283529160200191610bbf565b820191906000526020600020905b815481529060010190602001808311610ba257829003601f168201915b50505050509050610bd08151151590565b610bec5760405162461bcd60e51b81526004016102b990611d7e565b60008082604051610bfd9190611beb565b908152602001604051809103902090506000805b6003830154811015610d1157610c36858460030183815481106107c0576107c0611dc8565b15610cff57600383018054610c4d90600190611e2f565b81548110610c5d57610c5d611dc8565b9060005260206000209060020201836003018281548110610c8057610c80611dc8565b6000918252602090912060029091020180610c9b8382611e42565b50600181810190610cae90840182611e42565b50505060038301805480610cc457610cc4611f15565b60008281526020812060001990920191600283020190610ce48282611687565b610cf2600183016000611687565b5050905560019150610d11565b80610d0981611df4565b915050610c11565b5080610d555760405162461bcd60e51b815260206004820152601360248201527215d85cdd19551e5c19481b9bdd08199bdd5b99606a1b60448201526064016102b9565b600184604051610d659190611beb565b90815260200160405180910390206000610d7f9190611687565b82604051610d8d9190611beb565b60405180910390207f1e8ecac00c1bc3996cc4d4d112ff65c5412023d49c4b5f177bf16c5389ac9ec085604051610a0b91906118e1565b606060008083604051610dd79190611beb565b9081526020016040518091039020905080600301805480602002602001604051908101604052809291908181526020016000905b82821015610f615783829060005260206000209060020201604051806040016040529081600082018054610e3e90611c07565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6a90611c07565b8015610eb75780601f10610e8c57610100808354040283529160200191610eb7565b820191906000526020600020905b815481529060010190602001808311610e9a57829003601f168201915b50505050508152602001600182018054610ed090611c07565b80601f0160208091040260200160405190810160405280929190818152602001828054610efc90611c07565b8015610f495780601f10610f1e57610100808354040283529160200191610f49565b820191906000526020600020905b815481529060010190602001808311610f2c57829003601f168201915b50505050508152505081526020019060010190610e0b565b50505050915050919050565b6002546001600160a01b03163314610f975760405162461bcd60e51b81526004016102b990611bc3565b60008082604051610fa89190611beb565b90815260200160405180910390209050610fca8160000180546102f590611c07565b6110105760405162461bcd60e51b815260206004820152601760248201527610d85d1959dbdc9e48191bd95cc81b9bdd08195e1a5cdd604a1b60448201526064016102b9565b60005b600382015481101561110f57600082600301828154811061103657611036611dc8565b9060005260206000209060020201600001805461105290611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461107e90611c07565b80156110cb5780601f106110a0576101008083540402835291602001916110cb565b820191906000526020600020905b8154815290600101906020018083116110ae57829003601f168201915b505050505090506001816040516110e29190611beb565b908152602001604051809103902060006110fc9190611687565b508061110781611df4565b915050611013565b506000826040516111209190611beb565b908152604051908190036020019020600061113b8282611687565b611149600183016000611687565b600282016000905560038201600061116191906116c4565b5050816040516111719190611beb565b604051908190038120907fc8934a36da06d01c466bff2a6d368394fb69c8396e9c23b09982068a2c6bc0b090600090a25050565b6002546001600160a01b031633146111cf5760405162461bcd60e51b81526004016102b990611bc3565b600080836040516111e09190611beb565b908152604051908190036020019020600201919091555050565b6112256040518060800160405280606081526020016060815260200160008152602001606081525090565b60006001836040516112379190611beb565b9081526020016040518091039020805461125090611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461127c90611c07565b80156112c95780601f1061129e576101008083540402835291602001916112c9565b820191906000526020600020905b8154815290600101906020018083116112ac57829003601f168201915b505050505090506112da8151151590565b6112f65760405162461bcd60e51b81526004016102b990611d7e565b6000816040516113069190611beb565b908152602001604051809103902060405180608001604052908160008201805461132f90611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461135b90611c07565b80156113a85780601f1061137d576101008083540402835291602001916113a8565b820191906000526020600020905b81548152906001019060200180831161138b57829003601f168201915b505050505081526020016001820180546113c190611c07565b80601f01602080910402602001604051908101604052809291908181526020018280546113ed90611c07565b801561143a5780601f1061140f5761010080835404028352916020019161143a565b820191906000526020600020905b81548152906001019060200180831161141d57829003601f168201915b505050505081526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156115c857838290600052602060002090600202016040518060400160405290816000820180546114a590611c07565b80601f01602080910402602001604051908101604052809291908181526020018280546114d190611c07565b801561151e5780601f106114f35761010080835404028352916020019161151e565b820191906000526020600020905b81548152906001019060200180831161150157829003601f168201915b5050505050815260200160018201805461153790611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461156390611c07565b80156115b05780601f10611585576101008083540402835291602001916115b0565b820191906000526020600020905b81548152906001019060200180831161159357829003601f168201915b50505050508152505081526020019060010190611472565b50505091525090949350505050565b6002546001600160a01b031633146116015760405162461bcd60e51b81526004016102b990611bc3565b6001600160a01b0381166116495760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016102b9565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000818051906020012083805190602001201490505b92915050565b50805461169390611c07565b6000825580601f106116a3575050565b601f0160209004906000526020600020908101906116c191906116e5565b50565b50805460008255600202906000526020600020908101906116c191906116fe565b5b808211156116fa57600081556001016116e6565b5090565b808211156116fa5760006117128282611687565b611720600183016000611687565b506002016116fe565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261175057600080fd5b813567ffffffffffffffff8082111561176b5761176b611729565b604051601f8301601f19908116603f0116810190828211818310171561179357611793611729565b816040528381528660208588010111156117ac57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156117e157600080fd5b833567ffffffffffffffff808211156117f957600080fd5b6118058783880161173f565b9450602086013591508082111561181b57600080fd5b6118278783880161173f565b9350604086013591508082111561183d57600080fd5b5061184a8682870161173f565b9150509250925092565b60006020828403121561186657600080fd5b813567ffffffffffffffff81111561187d57600080fd5b6118898482850161173f565b949350505050565b60005b838110156118ac578181015183820152602001611894565b50506000910152565b600081518084526118cd816020860160208601611891565b601f01601f19169290920160200192915050565b6020815260006118f460208301846118b5565b9392505050565b60608152600061190e60608301866118b5565b828103602084015261192081866118b5565b915050826040830152949350505050565b6000806040838503121561194457600080fd5b823567ffffffffffffffff8082111561195c57600080fd5b6119688683870161173f565b9350602085013591508082111561197e57600080fd5b5061198b8582860161173f565b9150509250929050565b6000806000606084860312156119aa57600080fd5b833567ffffffffffffffff808211156119c257600080fd5b6119ce8783880161173f565b945060208601359150808211156119e457600080fd5b506119f18682870161173f565b925050604084013590509250925092565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611a7957888303603f1901855281518051878552611a4d888601826118b5565b91890151858303868b0152919050611a6581836118b5565b968901969450505090860190600101611a29565b509098975050505050505050565b60008060408385031215611a9a57600080fd5b823567ffffffffffffffff811115611ab157600080fd5b611abd8582860161173f565b95602094909401359450505050565b600060208083528351608082850152611ae860a08501826118b5565b905081850151601f196040818785030181880152611b0684846118b5565b935080880151606088015260608801519250818785030160808801528383518086528686019150868160051b870101878601955060005b82811015611b8b578588830301845286518051868452611b5f878501826118b5565b918b0151848303858d0152919050611b7781836118b5565b988b0198958b019593505050600101611b3d565b509a9950505050505050505050565b600060208284031215611bac57600080fd5b81356001600160a01b03811681146118f457600080fd5b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b60008251611bfd818460208701611891565b9190910192915050565b600181811c90821680611c1b57607f821691505b602082108103611c3b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611c8b57600081815260208120601f850160051c81016020861015611c685750805b601f850160051c820191505b81811015611c8757828155600101611c74565b5050505b505050565b815167ffffffffffffffff811115611caa57611caa611729565b611cbe81611cb88454611c07565b84611c41565b602080601f831160018114611cf35760008415611cdb5750858301515b600019600386901b1c1916600185901b178555611c87565b600085815260208120601f198616915b82811015611d2257888601518255948401946001909101908401611d03565b5085821015611d405787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000611d6360408301856118b5565b8281036020840152611d7581856118b5565b95945050505050565b6020808252602a908201527f576173746554797065206e6f74206173736f636961746564207769746820616e604082015269792063617465676f727960b01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611e0657611e06611dde565b5060010190565b604081526000611e2060408301856118b5565b90508260208301529392505050565b8181038181111561168157611681611dde565b818103611e4d575050565b611e578254611c07565b67ffffffffffffffff811115611e6f57611e6f611729565b611e7d81611cb88454611c07565b6000601f821160018114611eb15760008315611e995750848201545b600019600385901b1c1916600184901b17845561094f565b600085815260209020601f19841690600086815260209020845b83811015611eeb5782860154825560019586019590910190602001611ecb565b5085831015611d405793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220255e63c178a4f4cf0533efcecbfa75b63ed677b74dd3ce5d9eec6ead8b7a0de164736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063de5d227411610066578063de5d227414610236578063edc785f914610249578063f03e3df11461025c578063f2fde38b1461027c57600080fd5b80638da5cb5b146101c55780639bfc012a146101f0578063c84a970214610203578063d89ff3b21461021657600080fd5b8063757c0228116100d3578063757c02281461015a578063852b1fe41461016d578063852fa8f9146101805780638617c2c2146101a457600080fd5b806304b59879146100fa5780632db30de41461010f578063640364a414610138575b600080fd5b61010d6101083660046117cc565b61028f565b005b61012261011d366004611854565b610499565b60405161012f91906118e1565b60405180910390f35b61014b610146366004611854565b61053e565b60405161012f939291906118fb565b61010d610168366004611931565b61067b565b61010d61017b366004611995565b610956565b61019461018e366004611854565b51151590565b604051901515815260200161012f565b6101b76101b2366004611854565b610a19565b60405190815260200161012f565b6002546101d8906001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b6101946101fe366004611854565b511590565b61010d610211366004611854565b610af1565b610229610224366004611854565b610dc4565b60405161012f9190611a02565b61010d610244366004611854565b610f6d565b61010d610257366004611a87565b6111a5565b61026f61026a366004611854565b6111fa565b60405161012f9190611acc565b61010d61028a366004611b9a565b6115d7565b6002546001600160a01b031633146102c25760405162461bcd60e51b81526004016102b990611bc3565b60405180910390fd5b600080846040516102d39190611beb565b908152602001604051809103902090506103798160000180546102f590611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461032190611c07565b801561036e5780601f106103435761010080835404028352916020019161036e565b820191906000526020600020905b81548152906001019060200180831161035157829003601f168201915b505050505051151590565b6103bf5760405162461bcd60e51b815260206004820152601760248201527610d85d1959dbdc9e48191bd95cc81b9bdd08195e1a5cdd604a1b60448201526064016102b9565b6040805180820190915283815260208082018490526003830180546001810182556000918252919020825183926002029091019081906103ff9082611c90565b50602082015160018201906104149082611c90565b505050846001856040516104289190611beb565b908152602001604051809103902090816104429190611c90565b50846040516104519190611beb565b60405180910390207f1b941ae6c2b6f23bf1a4862e293a66b25c90806f96774160c42c5fd58886baf4858560405161048a929190611d50565b60405180910390a25050505050565b8051602081830181018051600182529282019190930120915280546104bd90611c07565b80601f01602080910402602001604051908101604052809291908181526020018280546104e990611c07565b80156105365780601f1061050b57610100808354040283529160200191610536565b820191906000526020600020905b81548152906001019060200180831161051957829003601f168201915b505050505081565b805160208183018101805160008252928201919093012091528054819061056490611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461059090611c07565b80156105dd5780601f106105b2576101008083540402835291602001916105dd565b820191906000526020600020905b8154815290600101906020018083116105c057829003601f168201915b5050505050908060010180546105f290611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461061e90611c07565b801561066b5780601f106106405761010080835404028352916020019161066b565b820191906000526020600020905b81548152906001019060200180831161064e57829003601f168201915b5050505050908060020154905083565b6002546001600160a01b031633146106a55760405162461bcd60e51b81526004016102b990611bc3565b60006001836040516106b79190611beb565b908152602001604051809103902080546106d090611c07565b80601f01602080910402602001604051908101604052809291908181526020018280546106fc90611c07565b80156107495780601f1061071e57610100808354040283529160200191610749565b820191906000526020600020905b81548152906001019060200180831161072c57829003601f168201915b5050505050905061075a8151151590565b6107765760405162461bcd60e51b81526004016102b990611d7e565b600080826040516107879190611beb565b908152602001604051809103902090506000805b600383015481101561090b57610868868460030183815481106107c0576107c0611dc8565b906000526020600020906002020160000180546107dc90611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461080890611c07565b80156108555780601f1061082a57610100808354040283529160200191610855565b820191906000526020600020905b81548152906001019060200180831161083857829003601f168201915b505050505061166b90919063ffffffff16565b156108f9578483600301828154811061088357610883611dc8565b906000526020600020906002020160010190816108a09190611c90565b5060019150836040516108b39190611beb565b60405180910390207f1c46be1eb69c39252736f373574211ed8b3557fcb0540cdd415d7026ba47a16387876040516108ec929190611d50565b60405180910390a261090b565b8061090381611df4565b91505061079b565b508061094f5760405162461bcd60e51b815260206004820152601360248201527215d85cdd19551e5c19481b9bdd08199bdd5b99606a1b60448201526064016102b9565b5050505050565b6002546001600160a01b031633146109805760405162461bcd60e51b81526004016102b990611bc3565b600080846040516109919190611beb565b9081526040519081900360200190209050806109ad8582611c90565b50600181016109bc8482611c90565b50600281018290556040516109d2908590611beb565b60405180910390207ff09687f1ff8ccddd2db840bcc509b48cd253a6630592078d85d4c3ecedae7d508484604051610a0b929190611e0d565b60405180910390a250505050565b600080600183604051610a2c9190611beb565b90815260200160405180910390208054610a4590611c07565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7190611c07565b8015610abe5780601f10610a9357610100808354040283529160200191610abe565b820191906000526020600020905b815481529060010190602001808311610aa157829003601f168201915b5050505050905060008082604051610ad69190611beb565b90815260405190819003602001902060020154949350505050565b6002546001600160a01b03163314610b1b5760405162461bcd60e51b81526004016102b990611bc3565b6000600182604051610b2d9190611beb565b90815260200160405180910390208054610b4690611c07565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7290611c07565b8015610bbf5780601f10610b9457610100808354040283529160200191610bbf565b820191906000526020600020905b815481529060010190602001808311610ba257829003601f168201915b50505050509050610bd08151151590565b610bec5760405162461bcd60e51b81526004016102b990611d7e565b60008082604051610bfd9190611beb565b908152602001604051809103902090506000805b6003830154811015610d1157610c36858460030183815481106107c0576107c0611dc8565b15610cff57600383018054610c4d90600190611e2f565b81548110610c5d57610c5d611dc8565b9060005260206000209060020201836003018281548110610c8057610c80611dc8565b6000918252602090912060029091020180610c9b8382611e42565b50600181810190610cae90840182611e42565b50505060038301805480610cc457610cc4611f15565b60008281526020812060001990920191600283020190610ce48282611687565b610cf2600183016000611687565b5050905560019150610d11565b80610d0981611df4565b915050610c11565b5080610d555760405162461bcd60e51b815260206004820152601360248201527215d85cdd19551e5c19481b9bdd08199bdd5b99606a1b60448201526064016102b9565b600184604051610d659190611beb565b90815260200160405180910390206000610d7f9190611687565b82604051610d8d9190611beb565b60405180910390207f1e8ecac00c1bc3996cc4d4d112ff65c5412023d49c4b5f177bf16c5389ac9ec085604051610a0b91906118e1565b606060008083604051610dd79190611beb565b9081526020016040518091039020905080600301805480602002602001604051908101604052809291908181526020016000905b82821015610f615783829060005260206000209060020201604051806040016040529081600082018054610e3e90611c07565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6a90611c07565b8015610eb75780601f10610e8c57610100808354040283529160200191610eb7565b820191906000526020600020905b815481529060010190602001808311610e9a57829003601f168201915b50505050508152602001600182018054610ed090611c07565b80601f0160208091040260200160405190810160405280929190818152602001828054610efc90611c07565b8015610f495780601f10610f1e57610100808354040283529160200191610f49565b820191906000526020600020905b815481529060010190602001808311610f2c57829003601f168201915b50505050508152505081526020019060010190610e0b565b50505050915050919050565b6002546001600160a01b03163314610f975760405162461bcd60e51b81526004016102b990611bc3565b60008082604051610fa89190611beb565b90815260200160405180910390209050610fca8160000180546102f590611c07565b6110105760405162461bcd60e51b815260206004820152601760248201527610d85d1959dbdc9e48191bd95cc81b9bdd08195e1a5cdd604a1b60448201526064016102b9565b60005b600382015481101561110f57600082600301828154811061103657611036611dc8565b9060005260206000209060020201600001805461105290611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461107e90611c07565b80156110cb5780601f106110a0576101008083540402835291602001916110cb565b820191906000526020600020905b8154815290600101906020018083116110ae57829003601f168201915b505050505090506001816040516110e29190611beb565b908152602001604051809103902060006110fc9190611687565b508061110781611df4565b915050611013565b506000826040516111209190611beb565b908152604051908190036020019020600061113b8282611687565b611149600183016000611687565b600282016000905560038201600061116191906116c4565b5050816040516111719190611beb565b604051908190038120907fc8934a36da06d01c466bff2a6d368394fb69c8396e9c23b09982068a2c6bc0b090600090a25050565b6002546001600160a01b031633146111cf5760405162461bcd60e51b81526004016102b990611bc3565b600080836040516111e09190611beb565b908152604051908190036020019020600201919091555050565b6112256040518060800160405280606081526020016060815260200160008152602001606081525090565b60006001836040516112379190611beb565b9081526020016040518091039020805461125090611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461127c90611c07565b80156112c95780601f1061129e576101008083540402835291602001916112c9565b820191906000526020600020905b8154815290600101906020018083116112ac57829003601f168201915b505050505090506112da8151151590565b6112f65760405162461bcd60e51b81526004016102b990611d7e565b6000816040516113069190611beb565b908152602001604051809103902060405180608001604052908160008201805461132f90611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461135b90611c07565b80156113a85780601f1061137d576101008083540402835291602001916113a8565b820191906000526020600020905b81548152906001019060200180831161138b57829003601f168201915b505050505081526020016001820180546113c190611c07565b80601f01602080910402602001604051908101604052809291908181526020018280546113ed90611c07565b801561143a5780601f1061140f5761010080835404028352916020019161143a565b820191906000526020600020905b81548152906001019060200180831161141d57829003601f168201915b505050505081526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156115c857838290600052602060002090600202016040518060400160405290816000820180546114a590611c07565b80601f01602080910402602001604051908101604052809291908181526020018280546114d190611c07565b801561151e5780601f106114f35761010080835404028352916020019161151e565b820191906000526020600020905b81548152906001019060200180831161150157829003601f168201915b5050505050815260200160018201805461153790611c07565b80601f016020809104026020016040519081016040528092919081815260200182805461156390611c07565b80156115b05780601f10611585576101008083540402835291602001916115b0565b820191906000526020600020905b81548152906001019060200180831161159357829003601f168201915b50505050508152505081526020019060010190611472565b50505091525090949350505050565b6002546001600160a01b031633146116015760405162461bcd60e51b81526004016102b990611bc3565b6001600160a01b0381166116495760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016102b9565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000818051906020012083805190602001201490505b92915050565b50805461169390611c07565b6000825580601f106116a3575050565b601f0160209004906000526020600020908101906116c191906116e5565b50565b50805460008255600202906000526020600020908101906116c191906116fe565b5b808211156116fa57600081556001016116e6565b5090565b808211156116fa5760006117128282611687565b611720600183016000611687565b506002016116fe565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261175057600080fd5b813567ffffffffffffffff8082111561176b5761176b611729565b604051601f8301601f19908116603f0116810190828211818310171561179357611793611729565b816040528381528660208588010111156117ac57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156117e157600080fd5b833567ffffffffffffffff808211156117f957600080fd5b6118058783880161173f565b9450602086013591508082111561181b57600080fd5b6118278783880161173f565b9350604086013591508082111561183d57600080fd5b5061184a8682870161173f565b9150509250925092565b60006020828403121561186657600080fd5b813567ffffffffffffffff81111561187d57600080fd5b6118898482850161173f565b949350505050565b60005b838110156118ac578181015183820152602001611894565b50506000910152565b600081518084526118cd816020860160208601611891565b601f01601f19169290920160200192915050565b6020815260006118f460208301846118b5565b9392505050565b60608152600061190e60608301866118b5565b828103602084015261192081866118b5565b915050826040830152949350505050565b6000806040838503121561194457600080fd5b823567ffffffffffffffff8082111561195c57600080fd5b6119688683870161173f565b9350602085013591508082111561197e57600080fd5b5061198b8582860161173f565b9150509250929050565b6000806000606084860312156119aa57600080fd5b833567ffffffffffffffff808211156119c257600080fd5b6119ce8783880161173f565b945060208601359150808211156119e457600080fd5b506119f18682870161173f565b925050604084013590509250925092565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611a7957888303603f1901855281518051878552611a4d888601826118b5565b91890151858303868b0152919050611a6581836118b5565b968901969450505090860190600101611a29565b509098975050505050505050565b60008060408385031215611a9a57600080fd5b823567ffffffffffffffff811115611ab157600080fd5b611abd8582860161173f565b95602094909401359450505050565b600060208083528351608082850152611ae860a08501826118b5565b905081850151601f196040818785030181880152611b0684846118b5565b935080880151606088015260608801519250818785030160808801528383518086528686019150868160051b870101878601955060005b82811015611b8b578588830301845286518051868452611b5f878501826118b5565b918b0151848303858d0152919050611b7781836118b5565b988b0198958b019593505050600101611b3d565b509a9950505050505050505050565b600060208284031215611bac57600080fd5b81356001600160a01b03811681146118f457600080fd5b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b60008251611bfd818460208701611891565b9190910192915050565b600181811c90821680611c1b57607f821691505b602082108103611c3b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611c8b57600081815260208120601f850160051c81016020861015611c685750805b601f850160051c820191505b81811015611c8757828155600101611c74565b5050505b505050565b815167ffffffffffffffff811115611caa57611caa611729565b611cbe81611cb88454611c07565b84611c41565b602080601f831160018114611cf35760008415611cdb5750858301515b600019600386901b1c1916600185901b178555611c87565b600085815260208120601f198616915b82811015611d2257888601518255948401946001909101908401611d03565b5085821015611d405787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000611d6360408301856118b5565b8281036020840152611d7581856118b5565b95945050505050565b6020808252602a908201527f576173746554797065206e6f74206173736f636961746564207769746820616e604082015269792063617465676f727960b01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611e0657611e06611dde565b5060010190565b604081526000611e2060408301856118b5565b90508260208301529392505050565b8181038181111561168157611681611dde565b818103611e4d575050565b611e578254611c07565b67ffffffffffffffff811115611e6f57611e6f611729565b611e7d81611cb88454611c07565b6000601f821160018114611eb15760008315611e995750848201545b600019600385901b1c1916600184901b17845561094f565b600085815260209020601f19841690600086815260209020845b83811015611eeb5782860154825560019586019590910190602001611ecb565b5085831015611d405793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220255e63c178a4f4cf0533efcecbfa75b63ed677b74dd3ce5d9eec6ead8b7a0de164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setCarbonEmissionRate(string,uint256)": {
        "details": "Sets the carbon emission rate of a specific waste type (for testing purposes)",
        "params": {
          "categoryId": "The ID of the waste category",
          "rate": "The carbon emission rate in g of CO2 per g of waste, scaled by 1e18"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1226,
        "contract": "contracts/core/WasteDataProvider.sol:WasteDataProvider",
        "label": "wasteCategories",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_struct(WasteCategory)1221_storage)"
      },
      {
        "astId": 1230,
        "contract": "contracts/core/WasteDataProvider.sol:WasteDataProvider",
        "label": "wasteTypeToCategory",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 1232,
        "contract": "contracts/core/WasteDataProvider.sol:WasteDataProvider",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(WasteType)1210_storage)dyn_storage": {
        "base": "t_struct(WasteType)1210_storage",
        "encoding": "dynamic_array",
        "label": "struct WasteDataProvider.WasteType[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(WasteCategory)1221_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct WasteDataProvider.WasteCategory)",
        "numberOfBytes": "32",
        "value": "t_struct(WasteCategory)1221_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(WasteCategory)1221_storage": {
        "encoding": "inplace",
        "label": "struct WasteDataProvider.WasteCategory",
        "members": [
          {
            "astId": 1212,
            "contract": "contracts/core/WasteDataProvider.sol:WasteDataProvider",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1214,
            "contract": "contracts/core/WasteDataProvider.sol:WasteDataProvider",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1216,
            "contract": "contracts/core/WasteDataProvider.sol:WasteDataProvider",
            "label": "emissionRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1220,
            "contract": "contracts/core/WasteDataProvider.sol:WasteDataProvider",
            "label": "wasteTypes",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(WasteType)1210_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(WasteType)1210_storage": {
        "encoding": "inplace",
        "label": "struct WasteDataProvider.WasteType",
        "members": [
          {
            "astId": 1207,
            "contract": "contracts/core/WasteDataProvider.sol:WasteDataProvider",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1209,
            "contract": "contracts/core/WasteDataProvider.sol:WasteDataProvider",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}